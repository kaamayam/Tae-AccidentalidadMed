# TEST DE NORMALIDAD CON RESIDUOS INTERNAMENTE ESTUDENTIZADOS
shapiro.test(rstandard(modeloanova))
# TESTS PARA HOMOGENEIDAD DE VARIANZA
bartlett.test(Vida.costo~Tipo)
# TESTS PARA HOMOGENEIDAD DE VARIANZA
bartlett.test(Vida~Tipo)
rm(list=ls(all=TRUE))
datos13=data.frame(Lote=factor(rep(1:5,times=5)),ContCalcio=scan())
datos13
library(xtable)
#MODELANDO EFECTOS ALEATORIOS PARA OBTENER COMPONENTES DE VARIANZA
diseno=lmer(ContCalcio~1|Lote)
#MODELANDO EFECTOS ALEATORIOS PARA OBTENER COMPONENTES DE VARIANZA
library(lme4)
#MODELANDO EFECTOS ALEATORIOS PARA OBTENER COMPONENTES DE VARIANZA
library(lme4)
diseno=lmer(ContCalcio~1|Lote)
attach(datos13)
#MODELANDO EFECTOS ALEATORIOS PARA OBTENER COMPONENTES DE VARIANZA
library(lme4)
diseno=lmer(ContCalcio~1|Lote)
diseno
qchisq(p = 0.025,df =20 ,lower.tail = F)
qchisq(p = 0.95,df =20 ,lower.tail = F)
0.0876/34.16961
0.0876/10.85081
1/2*(571.0660+860.6952) - 1/2*(433.6538+496.4646)
((1/3^2)/7)*3 + ((1/4^2)/7)*4
7/36
(1/3^2)*3 + (1/4^2)*4
((1/3^2)*3 + (1/4^2)*4)/3
7/36
250.8214^2 / ((1/2)/4)
250.8214^2 / ((1/2)/4)
250.8214^2
250.8214^2 / (1/4)
251645.5/2374.497
250.8214/sqrt(2374.497/4)
qt(0.05,12,lower.tail = F)
(571.0660+433.6538)/2 - (860.6952+496.4646)/2
-176.22/sqrt(2374.497/4)
qt(0.025,12,lower.tail = F)
problema2=data.frame(A=factor(rep(c(2,4,8),each=12)),
B=factor(rep(c(400,500,650),times=12)),
C=factor(rep(rep(c(3,4),each=3),times=6)),Y=scan())
attach(problema2)
#INTERACCIÓN TRIPLE
win.graph()
interaction.plot(A[C==3],B[C==3],Y[C==3],type="b",pch=c(1,2,3),
col=c("black","red","blue"),lwd=3,lty=c(1,2,3),
main="Interacción A*B cuando C=3h")
win.graph()
interaction.plot(A[C==4],B[C==4],Y[C==4],type="b",pch=c(1,2,3),
col=c("black","red","blue"),lwd=3,,lty=c(1,2,3),
main=" Interacción A*B cuando C=4h")
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(pérdida.peso~proporción*trat.superf*sustancia)
View(problema2)
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(Y~A*B*C)
anova(modelo1)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*B+A*C+B*C)
anova(modelo2)
#CORRIENDO MODELO SIN INTERACCIÓN TRIPLE Y SIN EFECTO DE INTERACCIÓN
#PROPORCIÓN:TRATAMIENTO #SUPERFICIAL
modelo3=aov(pérdida.peso~proporción*sustancia+trat.superf*sustancia)
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(Y~A*B*C)
anova(modelo1)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*B+
A*C+B*C)
anova(modelo2)
#CORRIENDO MODELO SIN INTERACCIÓN TRIPLE Y SIN EFECTO DE INTERACCIÓN
#PROPORCIÓN:TRATAMIENTO #SUPERFICIAL
modelo3=aov(Y~A*C+B*C)
anova(modelo3)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*B+
A*C+B*C)
anova(modelo2)
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(Y~A*B*C)
anova(modelo1)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*B+A*C+B*C)
anova(modelo2)
#LECTURA DE LOS DATOS
datos.tela=data.frame(trat.superf=factor(rep(c("S1","S1","S2","S2"),times=6)),
sustancia=factor(rep(c("F1","F2","F1","F2"),times=6)),
proporción=factor(c(rep("25%",8),rep("50%",8),
rep("75%",8))),pérdida.peso=scan())
attach(datos.tela)
#INTERACCIÓN TRIPLE
win.graph(width=10,height=5)
layout(cbind(c(1),c(2)))
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(pérdida.peso~proporción*trat.superf*sustancia)
anova(modelo1)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(pérdida.peso~proporción*trat.superf+
proporción*sustancia+trat.superf*sustancia)
anova(modelo2)
#CORRIENDO MODELO SIN INTERACCIÓN TRIPLE Y SIN EFECTO DE INTERACCIÓN
PROPORCIÓN:TRATAMIENTO #SUPERFICIAL
#CORRIENDO MODELO SIN INTERACCIÓN TRIPLE Y SIN EFECTO DE INTERACCIÓN
#PROPORCIÓN:TRATAMIENTO #SUPERFICIAL
modelo3=aov(pérdida.peso~proporción*sustancia+trat.superf*sustancia)
anova(modelo3)
View(datos.tela)
problema2=data.frame(A=factor(rep(c(2,4,8),each=12)),
B=factor(rep(c(400,500,650),times=12)),
C=factor(rep(rep(c(3,4),each=3),times=6)),Y=scan())
attach(problema2)
#INTERACCIÓN TRIPLE
win.graph()
interaction.plot(A[C==3],B[C==3],Y[C==3],type="b",pch=c(1,2,3),
col=c("black","red","blue"),lwd=3,lty=c(1,2,3),
main="Interacción A*B cuando C=3h")
win.graph()
interaction.plot(A[C==4],B[C==4],Y[C==4],type="b",pch=c(1,2,3),
col=c("black","red","blue"),lwd=3,,lty=c(1,2,3),
main=" Interacción A*B cuando C=4h")
#INTERACCIÓN TRIPLE
win.graph(width=10,height=5)
layout(cbind(c(1),c(2)))
interaction.plot(A[B=="F1"],C[B=="F1"],
pérdida.peso[B=="F1"],type="b",pch=c(1,2),
col=c("black","red"),lwd=3,
main="Figura 1")
#INTERACCIONES DOBLES
layout(rbind(c(1,1,2,2),c(0,3,3,0)))
interaction.plot(A,C,pérdida.peso,type="b",pch=c(1,2),
col=c("black","red"),
lwd=2,main="Figura 3")
interaction.plot(A,B,pérdida.peso,type="b",pch=c(1,2),
col=c("black","red"),
lwd=2,main="Figura 4")
interaction.plot(C,B,pérdida.peso,type="b",pch=c(1,2),
col=c("black","red"),lwd=2,main="Figura 5")
#BOXPLOTS EFECTOS PRINCIPALES
layout(rbind(c(1,1,2,2),c(0,3,3,0)))
boxplot(pérdida.peso~A,boxwex=0.4,ylab="pérdida de peso",
xlab="A B",
col=c("bisque","blue","gray"),main="Figura 6")
boxplot(pérdida.peso~C,boxwex=0.4,ylab="pérdida de peso",
xlab="tratamiento superficie",col=c("bisque","blue"),main="Figura 7")
boxplot(pérdida.peso~B,boxwex=0.4,
ylab="pérdida de peso",xlab="B",col=c("bisque","blue"),main="Figura 8")
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(pérdida.peso~A*C*B)
#INTERACCIONES DOBLES
layout(rbind(c(1,1,2,2),c(0,3,3,0)))
interaction.plot(A,C,Y,type="b",pch=c(1,2),
col=c("black","red"),
lwd=2,main="Figura 3")
interaction.plot(A,B,Y,type="b",pch=c(1,2),
col=c("black","red"),
lwd=2,main="Figura 4")
interaction.plot(C,B,Y,type="b",pch=c(1,2),
col=c("black","red"),lwd=2,main="Figura 5")
#BOXPLOTS EFECTOS PRINCIPALES
layout(rbind(c(1,1,2,2),c(0,3,3,0)))
boxplot(Y~A,boxwex=0.4,ylab="pérdida de peso",
xlab="A B",
col=c("bisque","blue","gray"),main="Figura 6")
boxplot(Y~C,boxwex=0.4,ylab="pérdida de peso",
xlab="tratamiento superficie",col=c("bisque","blue"),main="Figura 7")
boxplot(Y~B,boxwex=0.4,
ylab="pérdida de peso",xlab="B",col=c("bisque","blue"),main="Figura 8")
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(Y~A*C*B)
anova(modelo1)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*C+
A*B+C*B)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*C+A*B+C*B)
anova(modelo2)
#CORRIENDO MODELO SIN INTERACCIÓN TRIPLE Y SIN EFECTO DE INTERACCIÓN
#A:TRATAMIENTO #SUPERFICIAL
modelo3=aov(Y~A*B+C*B)
anova(modelo3)
#ANÁLISIS RESIDUOS ESTANDARIZADOS MODELO 2
layout(rbind(c(1,1,2,2),c(3,3,4,4)))
plot(fitted(modelo3),rstandard(modelo3),
cex=2,ylim=c(-2.1,2.1),main="Figura 9")
abline(h=c(-2,0,2),col=2)
stripchart(rstandard(modelo3)~A,cex=2,vertical=TRUE, ylim=c(-2.5,2.5),
pch=1,xlab="A B",main="Figura 10")
abline(h=c(-2,0,2),col=2)
stripchart(rstandard(modelo3)~C,cex=2,vertical=TRUE, ylim=c(-2.5,2.5),
pch=1,xlab="Tratamiento de superficie",main="Figura 11")
abline(h=c(-2,0,2),col=2)
stripchart(rstandard(modelo3)~B,cex=2,vertical=TRUE, ylim=c(-2.5,2.5),
pch=1,xlab="B",main="Figura 12")
abline(h=c(-2,0,2),col=2)
win.graph()
qqnorm(rstandard(modelo3),cex=2)
qqline(rstandard(modelo3),col=2)
shapiro.test(rstandard(modelo3))
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(Y~A*C*B)
anova(modelo1)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*C+A*B+C*B)
anova(modelo2)
#CORRIENDO MODELO SIN INTERACCIÓN TRIPLE Y SIN EFECTO DE INTERACCIÓN
#A:TRATAMIENTO #SUPERFICIAL
modelo3=aov(Y~A*B+C*B)
anova(modelo3)
#ANÁLISIS RESIDUOS ESTANDARIZADOS MODELO 2
layout(rbind(c(1,1,2,2),c(3,3,4,4)))
plot(fitted(modelo3),rstandard(modelo3),
cex=2,ylim=c(-2.1,2.1),main="Figura 9")
plot(fitted(modelo3),rstandard(modelo3),
cex=2,ylim=c(-2.1,2.1),main="Figura 9")
#ANÁLISIS RESIDUOS ESTANDARIZADOS MODELO 2
#layout(rbind(c(1,1,2,2),c(3,3,4,4)))
plot(fitted(modelo3),rstandard(modelo3),
cex=2,ylim=c(-2.1,2.1),main="Figura 9")
abline(h=c(-2,0,2),col=2)
stripchart(rstandard(modelo3)~A,cex=2,vertical=TRUE, ylim=c(-2.5,2.5),
pch=1,xlab="A B",main="Figura 10")
abline(h=c(-2,0,2),col=2)
stripchart(rstandard(modelo3)~C,cex=2,vertical=TRUE, ylim=c(-2.5,2.5),
pch=1,xlab="Tratamiento de superficie",main="Figura 11")
abline(h=c(-2,0,2),col=2)
stripchart(rstandard(modelo3)~B,cex=2,vertical=TRUE, ylim=c(-2.5,2.5),
pch=1,xlab="B",main="Figura 12")
abline(h=c(-2,0,2),col=2)
qqnorm(rstandard(modelo3),cex=2)
qqline(rstandard(modelo3),col=2)
shapiro.test(rstandard(modelo3))
boxplot(Y~A,boxwex=0.4,ylab="Concentración porcentual de fibra",
xlab="A B",
col=c("bisque","blue","gray"),main="Figura 6")
boxplot(Y~C,boxwex=0.4,ylab="Concentración porcentual de fibra",
xlab="tiempo de cocción de la pulpa ",col=c("bisque","blue"),main="Figura 7")
boxplot(Y~B,boxwex=0.4,
ylab="Concentración porcentual de fibra",xlab="B",col=c("bisque","blue"),main="Figura 8")
boxplot(Y~A,boxwex=0.4,ylab="Concentración porcentual de fibra",
xlab="A B",
col=c("bisque","blue","gray"),main="Figura 6")
boxplot(Y~C,boxwex=0.4,ylab="Concentración porcentual de fibra",
xlab="tiempo de cocción de la pulpa ",col=c("bisque","blue"),main="Figura 7")
boxplot(Y~B,boxwex=0.4,
ylab="Concentración porcentual de fibra",xlab="B",col=c("bisque","blue"),main="Figura 8")
qf(0.1,4,18)
qf(0.05,4,18)
pf(3.91,4,18)
pf(3.91,4,18,lower.tail = F)
pf(3.9167,4,18,lower.tail = F)
pf(3.9167,2,18,lower.tail = F)
pf(3.9167,2,18,lower.tail = F)
pf(3.9167,2,4,lower.tail = F)
#MODELO ANOVA SIN LA INTERACCIÓN TRIPLE
modelo2=aov(Y~A*C+A*B+C*B)
anova(modelo2)
pf(3.9167,4,18,lower.tail = F)
pf(3.9167,4,18,lower.tail = T)
pf(3.9167,4,18,lower.tail = F)
pf(2.677,2,18,lower.tail = F)
problema2=data.frame(A=factor(rep(c(2,4,8),each=12)),
B=factor(rep(c(400,500,650),times=12)),
C=factor(rep(rep(c(3,4),each=3),times=6)),Y=scan())
problema2=data.frame(A=factor(rep(c(2,4,8),each=12)),
B=factor(rep(c(400,500,650),times=12)),
C=factor(rep(rep(c(3,4),each=3),times=6)),Y=scan())
attach(problema2)
#MODELO ANOVA CON LA INTERACCIÓN TRIPLE
modelo1=aov(Y~A*C*B)
anova(modelo1)
ceiling_date(Sys.Date() %m-% months(1), 'month') %m-% days(1)
library(lubridate)
ceiling_date(Sys.Date() %m-% months(1), 'month') %m-% days(1)
ceiling_date(1014-01-01 %m-% months(1), 'month') %m-% days(1)
ceiling_date(2014-01-01 %m-% months(1), 'month') %m-% days(1)
ceiling_date("2014-01-01" %m-% months(1), 'month') %m-% days(1)
ceiling_date(as.Date("2014-01-01") %m-% months(1), 'month') %m-% days(1)
ceiling_date(as.Date("2014-01-02") %m-% months(1), 'month') %m-% days(1)
floor_date(Sys.Date() %m-% months(1), 'month')
ceiling_date(as.Date("2014-01-03") %m-% months(1), 'month') %m-% days(1)
ceiling_date(as.Date("2014-01-15") %m-% months(1), 'month') %m-% days(1)
ceiling_date(as.Date("2014-01-25") %m-% months(1), 'month') %m-% days(1)
# Cargando el modelo -------
modelo <- readRDS("modelo_glm.rds")
setwd("~/Downloads/Tae-AccidentalidadMed")
# Cargando el modelo -------
modelo <- readRDS("modelo_glm.rds")
# datos
#datos<- read.csv("incidentes_viales.csv", sep = ";",quote = "")
holidays_fecha <- readRDS("bases_datos/Holidays.rds")%>% as.data.frame()
library(tidyverse)
# Cargando el modelo -------
modelo <- readRDS("modelo_glm.rds")
# datos
#datos<- read.csv("incidentes_viales.csv", sep = ";",quote = "")
holidays_fecha <- readRDS("bases_datos/Holidays.rds")%>% as.data.frame()
#barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
#conteos<- readRDS("bases_datos/conteos_sin.rds")
conteos<- readRDS("bases_datos/conteos_con.rds")
# particion de la base de datos
#train <- conteos %>% filter(ano <= 2017)
train <- readRDS("bases_datos/train.rds")
validation <- conteos %>% filter(ano >= 2018 | ano <= 2019)
test <- conteos  %>% filter(ano >= 2020)
# Diario ----- input: 2014-03-25  (ano, mes, dia)
prediccion_dia <- function(f1){
f1 <- as.Date(f1)
barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
dia_n <-  as.integer(format(f1, "%d"))
dia <- as.factor(wday(f1, label = TRUE))
mes <- as.factor(format(f1, "%b"))
ano <- as.integer(format(f1, "%Y"))
holi_bin <- ifelse(f1 %in% holidays_fecha$holidays_fecha , 1, 0) %>% factor()
BARRIOS <- readRDS('bases_datos/nombres_barrios.rds')
CLASE_ACCIDENTE <- c('volcamiento','otro',
'atropello','choque',
'caida ocupante','incendio')
new_dat <- data.frame(dia_n=rep(dia_n, each=length(BARRIOS)),
dia=rep(dia, each=length(BARRIOS)),
mes=rep(mes, each=length(BARRIOS)),
ano=rep(ano, each=length(BARRIOS)),
holi_bin=rep(holi_bin, each=length(BARRIOS)),
CLASE_ACCIDENTE = rep(CLASE_ACCIDENTE, each=length(BARRIOS)),
BARRIO=BARRIOS) #aqui deberian ir todos los barrios
new_dat$choque <- as.integer(predict(modelo, new_dat,type = "response"))
predicciones<-spread(new_dat, key = CLASE_ACCIDENTE, value = choque,fill = 0)
predicciones<-predicciones %>% mutate("Total"=rowSums(predicciones[ , 7:12]))
predicciones$escala<- ifelse(predicciones$Total<=3,"moderado","grave")
#necesitamos 332 datos de barrios
dia1<-left_join(barrios_med@data, predicciones, by= c("NOMBRE" = "BARRIO"))
barrios_med@data<- dia1
totalizados_med <-  apply(predicciones[,7:13], MARGIN = 2, sum)
return(list(totalizados_med,predicciones,barrios_med))
}
#MAPA
f1 <- as.Date('2014-03-25')
mapview(prediccion_dia(f1)[3], zcol=c("Total"))
library(mapview)
library(tidyverse)
library(lubridate)
library(bsts)
library(mapview)
# Cargando el modelo -------
modelo <- readRDS("modelo_glm.rds")
# datos
#datos<- read.csv("incidentes_viales.csv", sep = ";",quote = "")
holidays_fecha <- readRDS("bases_datos/Holidays.rds")%>% as.data.frame()
#barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
#conteos<- readRDS("bases_datos/conteos_sin.rds")
conteos<- readRDS("bases_datos/conteos_con.rds")
# particion de la base de datos
#train <- conteos %>% filter(ano <= 2017)
train <- readRDS("bases_datos/train.rds")
validation <- conteos %>% filter(ano >= 2018 | ano <= 2019)
test <- conteos  %>% filter(ano >= 2020)
validation <- conteos %>% filter(ano >= 2018 & ano <= 2019)
test <- conteos  %>% filter(ano >= 2020)
# Diario ----- input: 2014-03-25  (ano, mes, dia)
prediccion_dia <- function(f1){
f1 <- as.Date(f1)
barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
dia_n <-  as.integer(format(f1, "%d"))
dia <- as.factor(wday(f1, label = TRUE))
mes <- as.factor(format(f1, "%b"))
ano <- as.integer(format(f1, "%Y"))
holi_bin <- ifelse(f1 %in% holidays_fecha$holidays_fecha , 1, 0) %>% factor()
BARRIOS <- readRDS('bases_datos/nombres_barrios.rds')
CLASE_ACCIDENTE <- c('volcamiento','otro',
'atropello','choque',
'caida ocupante','incendio')
new_dat <- data.frame(dia_n=rep(dia_n, each=length(BARRIOS)),
dia=rep(dia, each=length(BARRIOS)),
mes=rep(mes, each=length(BARRIOS)),
ano=rep(ano, each=length(BARRIOS)),
holi_bin=rep(holi_bin, each=length(BARRIOS)),
CLASE_ACCIDENTE = rep(CLASE_ACCIDENTE, each=length(BARRIOS)),
BARRIO=BARRIOS) #aqui deberian ir todos los barrios
new_dat$choque <- as.integer(predict(modelo, new_dat,type = "response"))
predicciones<-spread(new_dat, key = CLASE_ACCIDENTE, value = choque,fill = 0)
predicciones<-predicciones %>% mutate("Total"=rowSums(predicciones[ , 7:12]))
predicciones$escala<- ifelse(predicciones$Total<=3,"moderado","grave")
#necesitamos 332 datos de barrios
dia1<-left_join(barrios_med@data, predicciones, by= c("NOMBRE" = "BARRIO"))
barrios_med@data<- dia1
totalizados_med <-  apply(predicciones[,7:13], MARGIN = 2, sum)
return(list(totalizados_med,predicciones,barrios_med))
}
#MAPA
f1 <- as.Date('2014-03-25')
mapview(prediccion_dia(f1)[3], zcol=c("Total"))
f1 <- as.Date(f1)
prediccion_dia(f1)
prediccion_dia(f1)[3]
prediccion_dia(f1)[2]
library(tidyverse)
library(lubridate)
library(bsts)
library(mapview)
# Cargando el modelo -------
modelo <- readRDS("modelo_glm.rds")
# datos
#datos<- read.csv("incidentes_viales.csv", sep = ";",quote = "")
holidays_fecha <- readRDS("bases_datos/Holidays.rds")%>% as.data.frame()
#barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
#conteos<- readRDS("bases_datos/conteos_sin.rds")
conteos<- readRDS("bases_datos/conteos_con.rds")
# particion de la base de datos
#train <- conteos %>% filter(ano <= 2017)
train <- readRDS("bases_datos/train.rds")
validation <- conteos %>% filter(ano >= 2018 & ano <= 2019)
test <- conteos  %>% filter(ano >= 2020)
# Diario ----- input: 2014-03-25  (ano, mes, dia)
prediccion_dia <- function(f1){
f1 <- as.Date(f1)
barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
dia_n <-  as.integer(format(f1, "%d"))
dia <- as.factor(wday(f1, label = TRUE))
mes <- as.factor(format(f1, "%b"))
ano <- as.integer(format(f1, "%Y"))
holi_bin <- ifelse(f1 %in% holidays_fecha$holidays_fecha , 1, 0) %>% factor()
BARRIOS <- readRDS('bases_datos/nombres_barrios.rds')
CLASE_ACCIDENTE <- c('volcamiento','otro',
'atropello','choque',
'caida ocupante','incendio')
new_dat <- data.frame(dia_n=rep(dia_n, each=length(BARRIOS)),
dia=rep(dia, each=length(BARRIOS)),
mes=rep(mes, each=length(BARRIOS)),
ano=rep(ano, each=length(BARRIOS)),
holi_bin=rep(holi_bin, each=length(BARRIOS)),
CLASE_ACCIDENTE = rep(CLASE_ACCIDENTE, each=length(BARRIOS)),
BARRIO=BARRIOS) #aqui deberian ir todos los barrios
new_dat$choque <- as.integer(predict(modelo, new_dat,type = "response"))
predicciones<-spread(new_dat, key = CLASE_ACCIDENTE, value = choque,fill = 0)
predicciones<-predicciones %>% mutate("Total"=rowSums(predicciones[ , 7:12]))
predicciones$escala<- ifelse(predicciones$Total<=3,"moderado","grave")
#necesitamos 332 datos de barrios
dia1<-left_join(barrios_med@data, predicciones, by= c("NOMBRE" = "BARRIO"))
barrios_med@data<- dia1
totalizados_med <-  apply(predicciones[,7:13], MARGIN = 2, sum)
return(list(totalizados_med,predicciones,barrios_med))
}
#MAPA
f1 <- as.Date('2014-03-25')
f1 <- as.Date(f1)
barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
dia_n <-  as.integer(format(f1, "%d"))
dia <- as.factor(wday(f1, label = TRUE))
mes <- as.factor(format(f1, "%b"))
ano <- as.integer(format(f1, "%Y"))
holi_bin <- ifelse(f1 %in% holidays_fecha$holidays_fecha , 1, 0) %>% factor()
BARRIOS <- readRDS('bases_datos/nombres_barrios.rds')
CLASE_ACCIDENTE <- c('volcamiento','otro',
'atropello','choque',
'caida ocupante','incendio')
new_dat <- data.frame(dia_n=rep(dia_n, each=length(BARRIOS)),
dia=rep(dia, each=length(BARRIOS)),
mes=rep(mes, each=length(BARRIOS)),
ano=rep(ano, each=length(BARRIOS)),
holi_bin=rep(holi_bin, each=length(BARRIOS)),
CLASE_ACCIDENTE = rep(CLASE_ACCIDENTE, each=length(BARRIOS)),
BARRIO=BARRIOS) #aqui deberian ir todos los barrios
new_dat$choque <- as.integer(predict(modelo, new_dat,type = "response"))
source("Modelo_funciones.R")
barrios_med
str(barrios_med)
shiny::runApp('Accidentalidad_medellin')
runApp()
runApp('Accidentalidad_medellin')
runApp()
runApp('Accidentalidad_medellin')
View(prediccion_mes)
barrios_med
barrios_med@data
f1 <- as.Date(f1)
barrios_med=readRDS("bases_datos/barrios_Medellin.rds")
dia_n <-  as.integer(format(f1, "%d"))
dia <- as.factor(wday(f1, label = TRUE))
mes <- as.factor(format(f1, "%b"))
ano <- as.integer(format(f1, "%Y"))
holi_bin <- ifelse(f1 %in% holidays_fecha$holidays_fecha , 1, 0) %>% factor()
BARRIOS <- readRDS('bases_datos/nombres_barrios.rds')
CLASE_ACCIDENTE <- c('volcamiento','otro',
'atropello','choque',
'caida ocupante','incendio')
new_dat <- data.frame(dia_n=rep(dia_n, each=length(BARRIOS)),
dia=rep(dia, each=length(BARRIOS)),
mes=rep(mes, each=length(BARRIOS)),
ano=rep(ano, each=length(BARRIOS)),
holi_bin=rep(holi_bin, each=length(BARRIOS)),
CLASE_ACCIDENTE = rep(CLASE_ACCIDENTE, each=length(BARRIOS)),
BARRIO=BARRIOS) #aqui deberian ir todos los barrios
new_dat$choque <- as.integer(predict(modelo, new_dat,type = "response"))
predicciones<-spread(new_dat, key = CLASE_ACCIDENTE, value = choque,fill = 0)
predicciones<-predicciones %>% mutate("Total"=rowSums(predicciones[ , 7:12]))
predicciones$escala<- ifelse(predicciones$Total<=3,"moderado","grave")
#necesitamos 332 datos de barrios
dia1<-left_join(barrios_med@data, predicciones, by= c("NOMBRE" = "BARRIO"))
barrios_med@data<- dia1
barrios_med@data
totalizados_med
totalizados_med <-  apply(predicciones[,7:13], MARGIN = 2, sum)
totalizados_med
class(totalizados_med)
str(totalizados_med)
totalizados_med <-  as.data.frame(apply(predicciones[,7:13], MARGIN = 2, sum))
class(totalizados_med)
runApp('Accidentalidad_medellin')
runApp('Accidentalidad_medellin')
